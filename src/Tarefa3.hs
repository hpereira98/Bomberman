{-|
Module: Main

Description : Módulo Haskell com funções que permitem o encode e o decode de um mapa de Bomberman

Copyright: Henrique Manuel Palmeira Pereira <a80261@alunos.uminho.pt>
           Ricardo Filipe Sousa Caçador <a81064@alunos.uminho.pt>

Um módulo contendo definições Haskell para o cálculo de funções que permitam transformar um mapa (lista de strings) numa única linha (linha) e vice-versa,
ou seja, pegar nessa linha e voltar a transformá-la no mapa inicial. As funções para isso utilizadas são a 'encode' e a 'decode'.

-}

module Main where

import System.Environment
import Data.Char
import Data.List

{- |
A função 'ondeInt' devolve-nos uma lista de inteiros que representam as posições do caracter '?' numa linha do mapa. A função recebe também, além da string,
um inteiro, que terá que ser 0 para os propósitos desejados.
É importante saber que o primeiro caracter da linha ocupa a posição 0.

=Propriedade:

prop> ondeInt [] _ = []

==Por exemplo:
>>> ondeInt "# ? ?? ? #" 0
[2,4,5,7]

>>> ondeInt "#   ?   #" 0
[4]

-}

ondeInt :: String -> Int -> [Int] 
ondeInt [] _ = []
ondeInt (x:xs) k | x=='?' = k : ondeInt xs (k+1)
                 | otherwise = ondeInt xs (k+1)

{- |
A função 'posicoes' parte da lista de inteiros gerada pela 'ondeInt' e transforma essa lista numa string, onde cada elemento é separado pelo
caracter ','.

=Propriedade:

prop> ondeInt [x] = show x

==Por exemplo:
>>> posicoes [2,4,5,7]
"2,4,5,7"

>>> posicoes [4]
"4"

-}

posicoes :: [Int] -> String 
posicoes [x] = show x
posicoes (x:xs) = show x ++ "," ++ posicoes xs

{- |
A função 'ondeIntMapa', partindo das funções 'posicoes' e 'ondeInt', vai-nos devolver uma lista com a localização dos caracteres '?' num mapa,
isto é, numa lista de strings. Para isso, recebe o mapa e um inteiro, que é a posição da primeira linha e que, portanto, terá que ser 0. 
Se numa linha do mapa não existirem '?', a função devolve "0" no que toca a essa linha.

=Propriedade:

prop> ondeIntMapa [] _ = []

==Por exemplo:
>>> ondeIntMapa ["#########","#       #","# #?#?# #","#  ?  ? #","#?# # #?#","# ?  ?  #","# #?#?# #","#  ??   #","#########"] 0
["0","0","3,5","3,6","1,7","2,5","3,5","3,4","0"]

>>> ondeIntMapa ["#########","# ????? #","# # #?# #","#?? ? ??#","# # # # #","#?     ?#","# # # # #","#???????#","#########"] 0
["0","2,3,4,5,6","5","1,2,4,6,7","0","1,7","0","1,2,3,4,5,6,7","0"]

-}

ondeIntMapa :: [String] -> Int -> [String]
ondeIntMapa [] _ = []
ondeIntMapa (x:xs) k | elem '?' x = [posicoes (ondeInt x 0)] ++ ondeIntMapa xs (k+1)
                     | (head x) /= '#' = []
                     | otherwise = [show 0] ++ ondeIntMapa xs (k+1)

{- |
A função 'mapaDim', partindo de um mapa, vai gerar um mapa diminuído, isto é, apenas irá devolver a dimensão do mapa e as localizações dos '?',
fornecidas pela função 'ondeIntMapa'.

=Propriedade:

prop> mapaDim [] = []

==Por exemplo:
>>> mapaDim ["#########","#       #","# #?#?# #","#  ?  ? #","#?# # #?#","# ?  ?  #","# #?#?# #","#  ??   #","#########"]
["9","0","0","3,5","3,6","1,7","2,5","3,5","3,4","0"]

>>> mapaDim ["#########","# ????? #","# # #?# #","#?? ? ??#","# # # # #","#?     ?#","# # # # #","#???????#","#########"]
["9","0","2,3,4,5,6","5","1,2,4,6,7","0","1,7","0","1,2,3,4,5,6,7","0"]

-}

mapaDim :: [String] -> [String]
mapaDim (x:xs) = show (length x):ondeIntMapa (x:xs) 0

{- |
A função 'separarCoordPU', partindo de um mapa, vai devolver apenas as informações relativas aos power-ups e às bombas colocadas no mapa.

=Propriedade:

prop> separarCoordPU [] = []

==Por exemplo:
>>> separarCoordPU ["#########","#       #","# #?#?# #","#  ?  ? #","#?# # #?#","# ?  ?  #","# #?#?# #","#  ??   #","#########","+ 1 1","+ 2 1"]
["+ 1 1","+ 2 1"]

>>> separarCoordPU ["#########","# ????? #","# # #?# #","#?? ? ??#","# # # # #","#?     ?#","# # # # #","#???????#","#########","+ 1 1","! 1 2","* 2 1 0 1 10","0 2 1"]
["+ 1 1","! 1 2","* 2 1 0 1 10"]

-}

separarCoordPU :: [String] -> [String]
separarCoordPU [] = []
separarCoordPU (x:xs) | (head x == '+' || head x == '!' || head x == '*') = x: separarCoordPU xs
                      | otherwise = separarCoordPU xs

{- |
A função 'separarJog' vai funcionar da mesma maneira que a 'separarCoordPU', mas em vez de receber as coordenadas dos power-ups e das bombas vai receber
as informações dos jogadores.

=Propriedade:

prop> separarJog [] = []

==Por exemplo:
>>> separarJog ["#########","#       #","# #?#?# #","#  ?  ? #","#?# # #?#","# ?  ?  #","# #?#?# #","#  ??   #","#########","0 1 2"]
["0 1 2"]

>>> separarJog ["#########","# ????? #","# # #?# #","#?? ? ??#","# # # # #","#?     ?#","# # # # #","#???????#","#########","+ 1 1","! 1 2","* 2 1 0 1 10","0 2 1","1 1 4"]
["0 2 1","1 1 4"]

-}

separarJog :: [String] -> [String] 
separarJog [] = []
separarJog ((x:y:z):xs) | (x=='0' || x=='1' || x=='2' || x=='3') && y==' ' =(x:y:z):separarJog xs
                        | otherwise = separarJog xs

{- |
A função 'tEpV' vai retirar os espaços e pôr vírgulas entre as coordenadas de um power-up ou de uma bomba.

=Propriedades:

prop> tEpV [] = []
prop> tEpV [x] | isDigit x = [x]

==Por exemplo:
>>> tEpV "+ 1 1"
"+1,1"

>>> tEpV "* 2 1 0 1 10"
"*2,1,0,1,10"

-}

tEpV :: String -> String 
tEpV [] = []
tEpV [x] | isDigit x = [x]
tEpV (x:y:xs) | isDigit x && y==' ' = x:',':tEpV xs
              | (x=='+' || x=='!' || x=='*') && y==' ' = x:tEpV xs
              | otherwise = x:tEpV (y:xs)

{- |
A função 'tEpVALL' vai aplicar a 'tEpV' à lista com as coordenadas dos power-ups e das bombas.

=Propriedade:

prop> tEpVALL [] = []

==Por exemplo:
>>> tEpVALL ["+ 1 1","+ 2 1"]
["+1,1","+2,1"]

>>> tEpVALL ["+ 1 1","! 1 2","* 2 1 0 1 10"]
["+1,1","!1,2","*2,1,0,1,10"]

-}

tEpVALL :: [String] -> [String] -- aplica tEpV a uma [String]
tEpVALL [] = []
tEpVALL (x:xs) = tEpV x: tEpVALL xs

{- |
A função 'tirarSimbL' remove um caracter da lista de coordenadas dos power-ups e das bombas, utilizando a função 'tirarSimb'.

=Propriedade:

prop> tirarSimbL [] _ = []

==Por exemplo:
>>> tirarSimbL ["+ 1 1","+ 2 1"] '+'
[" 1 1"," 2 1"]

>>> tirarSimbL ["+ 1 1","! 1 2"] '!'
["+ 1 1"," 1 2"]

-}
{- |
A função 'tirarSimb' remove um caracter das coordenadas de um power-up ou de uma bomba.

=Propriedade:

prop> tirarSimb [] _ = []

==Por exemplo:
>>> tirarSimb "+ 1 1" '+'
" 1 1"

>>> tirarSimb "! 1 1" '!'
" 1 1"

-}
tirarSimbL :: [String] -> Char -> [String]
tirarSimbL [] _ = []
tirarSimbL (x:xs) k = tirarSimb x k: tirarSimbL xs k
        where tirarSimb :: String -> Char -> String
              tirarSimb [] _ = []
              tirarSimb (x:xs) k | x==k = tirarSimb xs k
                                 | otherwise = x: tirarSimb xs k

{- |
A função 'tirarConsec' recebe uma lista com as coordenadas dos power-ups e das bombas e devolve essa lista, mas sem as cabeças das strings repetidas,
ou seja, vai remover os caracteres repetidos no início de cada informação.
Na base desta função está a 'tirarSimbL'.

=Propriedades:

prop> tirarConsec [] = []
prop> tirarConsec [x] = [x]

==Por exemplo:
>>> tirarConsec ["+ 1 1","+ 1 2","+ 1 3"]
["+ 1 1"," 1 2"," 1 3"]

>>> tirarConsec ["+ 1 1","+ 1 2","+ 1 3","! 2 1","! 2 2","! 3 3","* 3 1 1 1 10","* 3 2 0 1 10"]
["+ 1 1"," 1 2"," 1 3","! 2 1"," 2 2"," 3 3","* 3 1 1 1 10"," 3 2 0 1 10"]

-}

tirarConsec :: [String] -> [String] -- tira os simbolos repetidos
tirarConsec [] = []
tirarConsec [x] = [x]
tirarConsec (x:xs) | head x == '+' = x:tirarConsec (tirarSimbL xs '+')
                   | head x == '!' = x:tirarConsec (tirarSimbL xs '!')
                   | head x == '*' = x:tirarConsec (tirarSimbL xs '*')
                   | otherwise = x:tirarConsec xs

{- |
A função 'tirarEspaco' vai remover os espaços, ou seja, os caracteres ' ', no início de cada coordenada de power-up ou bomba, recebida pela 'tirarConsec'.

=Propriedade:

prop> tirarEspaco [] = []

==Por exemplo:
>>> tirarEspaco ["+ 1 1"," 1 2"," 1 3"]
["+ 1 1","1 2","1 3"]

>>> tirarEspaco ["+ 1 1"," 1 2"," 1 3","! 2 1"," 2 2"," 3 3","* 3 1 1 1 10"," 3 2 0 1 10"]
["+ 1 1","1 2","1 3","! 2 1","2 2","3 3","* 3 1 1 1 10","3 2 0 1 10"]

-}

tirarEspaco :: [String] -> [String] -- tira os espaços dps de retirar os consecutivos
tirarEspaco [] = []
tirarEspaco (x:xs) | head x==' ' = tail x:tirarEspaco xs
                   | otherwise = x:tirarEspaco xs

{- |
A função 'encode', utilizando as funções acima descritas, vai transformar um mapa numa string composta pela dimensão do mapa, pelas coordenadas dos
caracteres '?' e pelas informações relativas aos power-ups e às bombas (reduzidas) e aos jogadores (inalteradas).

==Por exemplo:
>>> encode ["#########","#       #","# #?#?# #","#  ?  ? #","#?# # #?#","# ?  ?  #","# #?#?# #","#  ??   #","#########","+ 5 2","+ 3 3","! 5 5","0 1 1"]
"9\n0\n0\n3,5\n3,6\n1,7\n2,5\n3,5\n3,4\n0\n+5,2\n3,3\n!5,5\n0 1 1\n"

>>> encode
"61\n0\n6,7,10,13,15,18,20,23,26,27,28,29,33,35,36,37,38,42,45,57\n5,9,15,23,27,33,39,47,49,51,53\n1,3,5,6,9,12,13,15,17,18,20,22,26,29,34,36,38,44,47,51,52,53,56\n1,11,17,25,31,37,51,59\n5,6,11,14,18,19,20,21,24,26,28,32,33,37,39,40,42,46,50,54,55,56,57,59\n13,17,21,23,27,33,35,39,45,47,51,55,59\n3,5,6,8,10,11,13,15,25,26,27,28,29,32,34,35,38,40,41,42,44,46,47,50,51,53,54,55,56,59\n1,5,7,9,11,19,27,31,33,37,41,45,49,51,55,57,59\n4,6,13,14,15,18,19,23,28,31,33,35,39,42,45,48,51,54,58\n1,11,13,15,19,23,25,27,29,37,41,43,55,57,59\n1,16,17,21,23,24,26,27,34,35,36,41,45,55,57,58,59\n1,9,11,15,17,23,27,29,31,33,35,37,41,43,49,53,57\n3,5,6,11,14,16,21,22,23,30,33,41,42,47,49,51,54,55,57,58\n1,3,9,15,17,25,31,33,41,43,55\n2,5,6,8,9,15,16,17,20,22,26,27,29,32,34,37,38,45,49,50,51,52,54,55,57\n1,3,5,7,9,11,13,17,27,31,35,41,43,47,49,51,57,59\n4,11,14,15,16,22,23,26,29,30,32,34,37,40,43,44,47,49,51,54,56\n7,9,29,37,47,51,59\n2,3,4,6,9,10,12,15,20,21,25,30,35,36,38,40,42,45,46,49,50,52,55,56,57,58\n9,13,15,25,27,31,35,49\n1,2,4,5,6,9,10,13,14,15,22,25,26,27,28,30,33,34,39,40,42,43,44,49,55,58\n1,3,5,17,37,39,41,53\n1,2,4,6,7,10,12,13,14,15,16,20,24,27,29,30,34,38,43,45,46,49,52,53,56,59\n5,13,19,23,31,39,51,53,55,57\n3,4,5,7,9,12,14,17,18,20,22,23,25,32,33,34,43,48,49,50,51,52,54,55,56,57\n1,5,7,9,11,15,17,19,35,43,45,49\n5,6,9,15,18,22,23,24,25,27,33,35,36,41,42,46,48,52,55,56,57,59\n3,7,17,23,27,31,33,37,39,43,45,47,53\n1,2,4,5,7,9,12,13,16,17,18,19,20,21,23,26,27,28,29,32,35,37,38,39,40,46,47,48,50,52,55,57,58,59\n3,9,13,17,27,29,31,39,43,45,49,53,59\n2,3,4,11,14,15,20,22,23,25,27,28,30,36,41,43,44,50,53,57,58\n3,5,11,13,23,25,27,33,35,37,45,47,49,53,59\n1,2,3,4,10,11,12,14,15,17,18,19,20,21,23,24,26,27,29,34,36,44,45,49,51,53,54,56\n7,11,17,29,33,35,37,51,57\n2,3,5,6,7,12,16,21,22,28,29,30,32,34,37,38,39,41,45,46,47,48,50,52,57,59\n21,27,29,33,35,37,43,45,55,57,59\n1,4,12,15,18,20,22,26,27,29,31,36,42,47,54,55,59\n3,7,17,25,27,35,39,41,45,49,51,53,55\n1,4,6,9,11,18,20,22,28,29,32,33,41,42,45,51,52,54,55,56,57,59\n7,9,11,15,17,23,27,33,37,43,51,59\n3,5,9,12,15,18,21,24,25,26,33,38,39,40,42,45,50\n3,5,7,13,15,21,25,39,53,59\n3,5,12,13,19,21,22,31,37,39,45,47,49,50,52,55,56,59\n9,11,13,15,27,29,33,35,47,49,51,53,55,57,59\n1,3,7,8,9,11,14,22,27,28,30,31,35,39,42,43,46,48,52,54,56\n1,3,5,7,9,15,17,19,25,31,35,47,49,51,55,57\n4,5,7,9,10,17,24,26,27,28,30,32,33,34,36,41,44,46,47,48,50,51,53,58,59\n3,5,9,11,15,19,21,25,27,29,33,47,49,51,53,59\n1,3,6,8,11,14,16,17,18,20,22,24,27,30,31,32,34,35,41,42,45,47,48,50,52,53,58,59\n1,7,17,19,33,41,45,49,51,55,59\n1,2,3,4,6,8,9,11,12,13,17,24,25,27,28,34,39,42,43,45,51,55,57,58,59\n1,7,11,13,15,19,21,31,47,49,51,53,57\n2,5,7,13,14,15,17,19,21,28,37,38,40,41,42,45,46,47,51,54,57,58,59\n3,7,9,11,15,23,27,31,33,47,53,59\n1,8,9,11,13,20,21,22,24,26,27,32,38,43,52,54,56,57,58,59\n1,5,7,9,11,13,23,29,35,39,47,49\n1,2,3,5,7,8,9,11,21,27,28,29,33,35,37,39,40,49,50,53,54,56,59\n13,35,39,43,51,55\n4,7,9,10,18,19,20,21,23,24,25,30,31,36,37,40,43,45,46,47,48,50,53\n0\n+7,1\n10,1\n37,1\n38,1\n5,3\n17,3\n29,7\n44,7\n13,9\n13,10\n58,11\n37,12\n11,13\n45,15\n20,19\n56,19\n26,21\n1,22\n24,23\n52,23\n53,23\n3,25\n7,25\n12,25\n23,25\n1,26\n45,26\n7,28\n19,29\n47,29\n52,29\n53,30\n3,31\n3,32\n5,32\n20,33\n27,33\n54,33\n51,34\n2,35\n7,35\n22,35\n45,35\n21,36\n18,39\n41,39\n40,41\n5,43\n12,43\n5,47\n5,48\n37,53\n47,53\n7,54\n22,55\n53,57\n!23,1\n5,2\n23,2\n39,2\n53,2\n29,3\n31,4\n6,7\n53,7\n54,9\n55,10\n36,11\n31,14\n43,14\n49,15\n7,16\n31,16\n51,16\n47,18\n10,21\n46,23\n4,25\n9,25\n52,27\n17,28\n9,29\n21,29\n40,29\n13,32\n1,33\n11,34\n29,35\n43,36\n15,37\n36,37\n27,38\n29,39\n5,42\n45,43\n8,45\n22,45\n47,46\n27,47\n17,49\n59,50\n51,51\n15,52\n49,52\n53,52\n11,54\n27,54\n5,56\n47,56\n27,57\n31,59\n"

-}

encode :: [String] -> String
encode l = unlines (mapaDim l++tirarEspaco (tirarConsec (tEpVALL (separarCoordPU l)))++separarJog l)


--FUNCOES DA TAREFA 1

{- |
A função 'aux' é uma função auxiliar, utilizada na 'grelha', que nos dá uma string que representa as linhas em posições ímpares 
(exceto as linhas 1 para qualquer dimensão superior a 5 e linhas 1 e 3 nos mapas de dimensão 5) de um mapa de dimensão d.
Recebe a dimensão do mapa e um Char, que tem que ser ' ' para o propósito desejado.

=Propriedade:

prop> aux 0 x = " "

==Por exemplo:
>>> aux 9 ' '
"#       #"

>>> aux 13 ' '
"#           #"

-}
aux :: Int -> Char -> String
aux 0 x = " "
aux d x = '#':replicate (d-2) x ++ "#"

{- |
A função 'aux1' é uma função auxiliar, utilizada na 'grelha', que nos dá uma string que representa as linhas em posições pares 
(exceto as linhas 0, (d-1), 2 e (d-3)) de um mapa de dimensão d.
Recebe a dimensão do mapa e um Char, que tem que ser '#' para o propósito desejado.

==Por exemplo:
>>> aux1 9 '#'
"#?#?#?#?#"

>>> aux1 13 '#'
"#?#?#?#?#?#?#"

-}

aux1 :: Int -> Char -> String
aux1 d x = unwords1 (replicate (d-div d 2) x)

{- |
A função 'unwords1' é uma função auxiliar, utilizada na 'aux1', que dada uma string, devolve uma lista dos elementos que compõem a string 
intercalados com ' ', sob a forma de string.

=Propriedades:

prop> unwords1 [] = " "
prop> unwords1 [x] = [x]

==Por exemplo:
>>> unwords1 "####"
"# # # #"

>>> unwords1 '##'
"# #"

-}

unwords1 :: String -> String
unwords1 [] = " "
unwords1 [x] = [x]
unwords1 (h:t) = [h]++" "++unwords1 t

{- |
A função 'grelha' recebe dois números inteiros, isto é, o número da linha do mapa e a sua dimensão,
e devolve a linha @y@ do mapa em forma de string. É de notar que a primeira linha do mapa é a linha 0
e a última é a linha @d-1@.

=Propriedade:

prop> Para a função ter o resultado desejado, tem que respeitar o seguinte: y <= d.

==Por exemplo:
>>> grelha 1 9
"#  ???  #"

>>> grelha 8 9
"#########"
-}

grelha :: Int -> Int -> String
grelha y d | y==1 && d==5 = '#':replicate (d-2) ' ' ++ "#"
           | y==3 && d==5 = '#':replicate (d-2) ' ' ++ "#"
           | y==0 || y==(d-1) = replicate d '#'
           | y==1 || y==(d-2) = "#  "++replicate (d-6) ' '++"  #"
           | y==2 || y==(d-3) = "# "++aux1 (d-4) '#'++" #"
           | odd y && y<=d = aux d ' '
           | even y && y<=d = aux1 d '#'

{- |
A função 'mapaSemN' é uma função que, dados dois números inteiros (posição da linha que encabeça o mapa e a dimensão), devolve uma lista de strings
que representam o mapa.
Para a lista devolvida não ser vazia, o primeiro inteiro recebido tem que ser inferior ou igual a (d-1).

==Por exemplo:
>>> mapaSemN 0 9
["#########","#       #","# # # # #","#       #","# # # # #","#       #","# # # # #","#       #","#########"]

>>> mapaSemN 2 9
["# # # # #","#       #","# # # # #","#       #","# # # # #","#       #","#########"]

-}

mapaSemN :: Int -> Int -> [String]
mapaSemN x d | x<=(d-1) = grelha x d:mapaSemN (x+1) d -- x tem q ser 0
             | otherwise = []
--

{- |
A função 'substituiPontos', recebendo a string resultante da 'encode' (sem a dimensão do mapa) e um mapa gerado pela função 'mapaSemN',
vai colocar os caracteres '?' nas respetivas posições.

=Propriedade:

prop> substituiPontos _ [] = []

==Por exemplo:
>>> substituiPontos "0\n0\n3,5\n3,6\n1,7\n2,5\n3,5\n3,4\n0\n+5,2\n3,3\n!5,5\n0 1 1\n" ["#########","#       #","# # # # #","#       #","# # # # #","#       #","# # # # #","#       #","#########"]
["#########","#       #","# #?#?# #","#  ?  ? #","#?# # #?#","# ?  ?  #","# #?#?# #","#  ??   #","#########"]

-}

substituiPontos :: String -> [String] -> [String] 
substituiPontos _ [] = []
substituiPontos (h:t) (x:xs) | h == '0' = substituiPontos t (x:xs)
                             | h == '\n' = x: substituiPontos t xs
                             | h == ',' = substituiPontos t (x:xs)
                             | h == '+' || h=='!' || h=='*' = x:xs
                             | isDigit h && isDigit (head t) = substituiPontos (drop 1 t) ((pontosi (read ([h]++[head t])) x): xs)
                             | (h=='0' || h=='1' || h=='2' || h=='3') && not (elem ',' t) = x:xs
                             | otherwise = substituiPontos t ((pontosi (read [h]) x): xs)

{- |
A função 'pontosi' é uma auxiliar da 'substituiPontos', que irá colocar um '?', na posição dada, numa linha do mapa.

=Propriedade:

prop> pontosi _ [] = []

==Por exemplo:
>>> pontosi 6 "#       #"
"#     ? #"

>>> pontosi 5 "# # # # #"
"# # #?# #"

-}

pontosi :: Int -> String -> String
pontosi _ [] = []
pontosi c (h:t) | c == 0 = "?" ++ t
                | otherwise = h : pontosi (c-1) t

{- |
A função 'ficarInf', que recebe a string gerada pela 'encode', vai devolver apenas as informações dos power-ups, das bombas e dos jogadores.

=Propriedade:

prop> ficarInf [] = []

==Por exemplo:
>>> ficarInf "9\n0\n0\n3,5\n3,6\n1,7\n2,5\n3,5\n3,4\n0\n+5,2\n3,3\n!5,5\n0 1 1\n"
"+5,2\n3,3\n!5,5\n0 1 1\n"

>>> ficarInf "61\n0\n6,7,10,13,15,18,20,23,26,27,28,29,33,35,36,37,38,42,45,57\n5,9,15,23,27,33,39,47,49,51,53\n1,3,5,6,9,12,13,15,17,18,20,22,26,29,34,36,38,44,47,51,52,53,56\n1,11,17,25,31,37,51,59\n5,6,11,14,18,19,20,21,24,26,28,32,33,37,39,40,42,46,50,54,55,56,57,59\n13,17,21,23,27,33,35,39,45,47,51,55,59\n3,5,6,8,10,11,13,15,25,26,27,28,29,32,34,35,38,40,41,42,44,46,47,50,51,53,54,55,56,59\n1,5,7,9,11,19,27,31,33,37,41,45,49,51,55,57,59\n4,6,13,14,15,18,19,23,28,31,33,35,39,42,45,48,51,54,58\n1,11,13,15,19,23,25,27,29,37,41,43,55,57,59\n1,16,17,21,23,24,26,27,34,35,36,41,45,55,57,58,59\n1,9,11,15,17,23,27,29,31,33,35,37,41,43,49,53,57\n3,5,6,11,14,16,21,22,23,30,33,41,42,47,49,51,54,55,57,58\n1,3,9,15,17,25,31,33,41,43,55\n2,5,6,8,9,15,16,17,20,22,26,27,29,32,34,37,38,45,49,50,51,52,54,55,57\n1,3,5,7,9,11,13,17,27,31,35,41,43,47,49,51,57,59\n4,11,14,15,16,22,23,26,29,30,32,34,37,40,43,44,47,49,51,54,56\n7,9,29,37,47,51,59\n2,3,4,6,9,10,12,15,20,21,25,30,35,36,38,40,42,45,46,49,50,52,55,56,57,58\n9,13,15,25,27,31,35,49\n1,2,4,5,6,9,10,13,14,15,22,25,26,27,28,30,33,34,39,40,42,43,44,49,55,58\n1,3,5,17,37,39,41,53\n1,2,4,6,7,10,12,13,14,15,16,20,24,27,29,30,34,38,43,45,46,49,52,53,56,59\n5,13,19,23,31,39,51,53,55,57\n3,4,5,7,9,12,14,17,18,20,22,23,25,32,33,34,43,48,49,50,51,52,54,55,56,57\n1,5,7,9,11,15,17,19,35,43,45,49\n5,6,9,15,18,22,23,24,25,27,33,35,36,41,42,46,48,52,55,56,57,59\n3,7,17,23,27,31,33,37,39,43,45,47,53\n1,2,4,5,7,9,12,13,16,17,18,19,20,21,23,26,27,28,29,32,35,37,38,39,40,46,47,48,50,52,55,57,58,59\n3,9,13,17,27,29,31,39,43,45,49,53,59\n2,3,4,11,14,15,20,22,23,25,27,28,30,36,41,43,44,50,53,57,58\n3,5,11,13,23,25,27,33,35,37,45,47,49,53,59\n1,2,3,4,10,11,12,14,15,17,18,19,20,21,23,24,26,27,29,34,36,44,45,49,51,53,54,56\n7,11,17,29,33,35,37,51,57\n2,3,5,6,7,12,16,21,22,28,29,30,32,34,37,38,39,41,45,46,47,48,50,52,57,59\n21,27,29,33,35,37,43,45,55,57,59\n1,4,12,15,18,20,22,26,27,29,31,36,42,47,54,55,59\n3,7,17,25,27,35,39,41,45,49,51,53,55\n1,4,6,9,11,18,20,22,28,29,32,33,41,42,45,51,52,54,55,56,57,59\n7,9,11,15,17,23,27,33,37,43,51,59\n3,5,9,12,15,18,21,24,25,26,33,38,39,40,42,45,50\n3,5,7,13,15,21,25,39,53,59\n3,5,12,13,19,21,22,31,37,39,45,47,49,50,52,55,56,59\n9,11,13,15,27,29,33,35,47,49,51,53,55,57,59\n1,3,7,8,9,11,14,22,27,28,30,31,35,39,42,43,46,48,52,54,56\n1,3,5,7,9,15,17,19,25,31,35,47,49,51,55,57\n4,5,7,9,10,17,24,26,27,28,30,32,33,34,36,41,44,46,47,48,50,51,53,58,59\n3,5,9,11,15,19,21,25,27,29,33,47,49,51,53,59\n1,3,6,8,11,14,16,17,18,20,22,24,27,30,31,32,34,35,41,42,45,47,48,50,52,53,58,59\n1,7,17,19,33,41,45,49,51,55,59\n1,2,3,4,6,8,9,11,12,13,17,24,25,27,28,34,39,42,43,45,51,55,57,58,59\n1,7,11,13,15,19,21,31,47,49,51,53,57\n2,5,7,13,14,15,17,19,21,28,37,38,40,41,42,45,46,47,51,54,57,58,59\n3,7,9,11,15,23,27,31,33,47,53,59\n1,8,9,11,13,20,21,22,24,26,27,32,38,43,52,54,56,57,58,59\n1,5,7,9,11,13,23,29,35,39,47,49\n1,2,3,5,7,8,9,11,21,27,28,29,33,35,37,39,40,49,50,53,54,56,59\n13,35,39,43,51,55\n4,7,9,10,18,19,20,21,23,24,25,30,31,36,37,40,43,45,46,47,48,50,53\n0\n+7,1\n10,1\n37,1\n38,1\n5,3\n17,3\n29,7\n44,7\n13,9\n13,10\n58,11\n37,12\n11,13\n45,15\n20,19\n56,19\n26,21\n1,22\n24,23\n52,23\n53,23\n3,25\n7,25\n12,25\n23,25\n1,26\n45,26\n7,28\n19,29\n47,29\n52,29\n53,30\n3,31\n3,32\n5,32\n20,33\n27,33\n54,33\n51,34\n2,35\n7,35\n22,35\n45,35\n21,36\n18,39\n41,39\n40,41\n5,43\n12,43\n5,47\n5,48\n37,53\n47,53\n7,54\n22,55\n53,57\n!23,1\n5,2\n23,2\n39,2\n53,2\n29,3\n31,4\n6,7\n53,7\n54,9\n55,10\n36,11\n31,14\n43,14\n49,15\n7,16\n31,16\n51,16\n47,18\n10,21\n46,23\n4,25\n9,25\n52,27\n17,28\n9,29\n21,29\n40,29\n13,32\n1,33\n11,34\n29,35\n43,36\n15,37\n36,37\n27,38\n29,39\n5,42\n45,43\n8,45\n22,45\n47,46\n27,47\n17,49\n59,50\n51,51\n15,52\n49,52\n53,52\n11,54\n27,54\n5,56\n47,56\n27,57\n31,59\n"
"+7,1\n10,1\n37,1\n38,1\n5,3\n17,3\n29,7\n44,7\n13,9\n13,10\n58,11\n37,12\n11,13\n45,15\n20,19\n56,19\n26,21\n1,22\n24,23\n52,23\n53,23\n3,25\n7,25\n12,25\n23,25\n1,26\n45,26\n7,28\n19,29\n47,29\n52,29\n53,30\n3,31\n3,32\n5,32\n20,33\n27,33\n54,33\n51,34\n2,35\n7,35\n22,35\n45,35\n21,36\n18,39\n41,39\n40,41\n5,43\n12,43\n5,47\n5,48\n37,53\n47,53\n7,54\n22,55\n53,57\n!23,1\n5,2\n23,2\n39,2\n53,2\n29,3\n31,4\n6,7\n53,7\n54,9\n55,10\n36,11\n31,14\n43,14\n49,15\n7,16\n31,16\n51,16\n47,18\n10,21\n46,23\n4,25\n9,25\n52,27\n17,28\n9,29\n21,29\n40,29\n13,32\n1,33\n11,34\n29,35\n43,36\n15,37\n36,37\n27,38\n29,39\n5,42\n45,43\n8,45\n22,45\n47,46\n27,47\n17,49\n59,50\n51,51\n15,52\n49,52\n53,52\n11,54\n27,54\n5,56\n47,56\n27,57\n31,59\n"

-}

ficarInf :: String -> String 
ficarInf [] = []
ficarInf (x:xs) | x=='+' || x=='!' || x=='*' = x:xs
                | otherwise = ficarInf xs

{- |
A função 'tirarJog', que recebe a string gerada pela 'ficarInf', vai devolver apenas as informações dos power-ups e das bombas, retirando as dos
jogadores.

=Propriedade:

prop> tirarJog [] = []

==Por exemplo:
>>> tirarJog "+5,2\n3,3\n!5,5\n0 1 1\n"
"+5,2\n3,3\n!5,5\n"

-}

tirarJog :: String -> String
tirarJog [] = []
tirarJog (x:xs) | isDigit x && head xs==' '= []
                | otherwise = x:tirarJog xs

{- |
A função 'tVpE' vai atuar de forma contrária à função 'tEpV', ou seja, volta a colocar espaços no lugar das vírgulas e entre o símbolo do power-up/bomba
e as suas coordenadas.

=Propriedade:

prop> tVpE [] = []

==Por exemplo:
>>> tVpE "+5,2\n3,3\n!5,5\n"
"+ 5 2\n3 3\n! 5 5\n"

-}

tVpE :: String -> String
tVpE [] = []
tVpE (x:xs) | x=='!' || x=='+' || x=='*' = x:' ':tVpE xs
            | x==',' = ' ':tVpE xs
            | otherwise = x:tVpE xs

{- |
A função 'ficarJog' vai fazer exatamente o contrário da 'tirarJog', isto é, apenas vai devolver as informações dos jogadores.

=Propriedade:

prop> ficarJog [] = []

==Por exemplo:
>>> ficarJog "+5,2\n3,3\n!5,5\n0 1 1\n"
"0 1 1\n"

-}
                              
ficarJog :: String -> String 
ficarJog [] = []
ficarJog (x:xs) | isDigit x && head xs==' '= x:xs
                | otherwise = ficarJog xs

{- |
A função 'ficarBombs' apenas devolve as informações relativas aos power-ups Bombs.

=Propriedade:

prop> ficarBombs [] = []

==Por exemplo:
>>> ficarBombs "+5,2\n3,3\n!5,5\n0 1 1\n"
"+5,2\n3,3\n"

-}

ficarBombs :: String -> String 
ficarBombs [] = []
ficarBombs (x:xs) | x=='!' || x=='*' = []
                  | otherwise = x:ficarBombs xs

{- |
A função 'resto' tem uma ação contrária à 'ficarBombs', ou seja, remove as informações relativas aos power-ups Bombs e devolve as restantes informações.

=Propriedade:

prop> resto [] = []

==Por exemplo:
>>> resto "+5,2\n3,3\n!5,5\n0 1 1\n"
"!5,5\n0 1 1\n"

-}

resto :: String -> String 
resto [] = []
resto (x:xs) | x=='!' || x=='*' = x:xs
             | otherwise = resto xs

{- |
A função 'ficarFlames', recebendo a string gerada pela 'resto', apenas devolve as informações relativas aos power-ups Flames.

=Propriedade:

prop> ficarFlames [] = []

==Por exemplo:
>>> ficarFlames "!5,5\n*1,1,0,1,10"
"!5,5\n"

-}

ficarFlames :: String -> String
ficarFlames [] = []
ficarFlames (x:xs) | x=='*' = []
                   | otherwise = x:ficarFlames xs

{- |
A função 'ficarBombas', recebendo a string gerada pela 'resto', vai atuar de forma contrária à 'ficarFlames', isto é, vai devolver apenas
as informações que dizem respeito às bombas colocadas no mapa.

=Propriedade:

prop> ficarBombas [] = []

==Por exemplo:
>>> ficarBombas "!5,5\n*1,1,0,1,10"
"*1,1,0,1,10"

-}

ficarBombas :: String -> String 
ficarBombas [] = []
ficarBombas (x:xs) | x=='*' = x:xs
                   | otherwise = ficarBombas xs

{- |
A função 'porSimbolo', recebendo uma string com as coordenadas de um dos power-ups ou das bombas, vai colocar um caracter ('+', '!' ou '*')
no início das coordenadas que não têm símbolo, ou seja, vai fazer o contrário da 'tirarConsec'.

=Propriedades:

prop> porSimbolo [] _ = []
prop> porSimbolo [x] _ = [x]

==Por exemplo:
>>> porSimbolo "+5,2\n3,3\n" '+'
"+5,2\n+3,3\n"

>>> porSimbolo "!1,1\n2,1\n3,1\n" '!'
"!1,1\n!2,1\n!3,1\n"

-}

porSimbolo :: String -> Char -> String 
porSimbolo [] _ = []
porSimbolo [x] _ = [x]
porSimbolo (x:xs) k | x=='\n' = x:k:porSimbolo xs k
                    | otherwise = x:porSimbolo xs k 

{- |
A função 'ficaDim', recebendo a string gerada pela 'encode', vai devolver apenas a dimensão do mapa comprimido, ou seja, vai devolver o(s) número(s),
sob a forma de string, antes do primeiro caracter '\n'.

=Propriedades:

prop> ficaDim [] = []

==Por exemplo:
>>> ficaDim "9\n0\n0\n3,5\n3,6\n1,7\n2,5\n3,5\n3,4\n0\n+5,2\n3,3\n!5,5\n0 1 1\n"
"9"

>>> ficaDim "61\n0\n6,7,10,13,15,18,20,23,26,27,28,29,33,35,36,37,38,42,45,57\n5,9,15,23,27,33,39,47,49,51,53\n1,3,5,6,9,12,13,15,17,18,20,22,26,29,34,36,38,44,47,51,52,53,56\n1,11,17,25,31,37,51,59\n5,6,11,14,18,19,20,21,24,26,28,32,33,37,39,40,42,46,50,54,55,56,57,59\n13,17,21,23,27,33,35,39,45,47,51,55,59\n3,5,6,8,10,11,13,15,25,26,27,28,29,32,34,35,38,40,41,42,44,46,47,50,51,53,54,55,56,59\n1,5,7,9,11,19,27,31,33,37,41,45,49,51,55,57,59\n4,6,13,14,15,18,19,23,28,31,33,35,39,42,45,48,51,54,58\n1,11,13,15,19,23,25,27,29,37,41,43,55,57,59\n1,16,17,21,23,24,26,27,34,35,36,41,45,55,57,58,59\n1,9,11,15,17,23,27,29,31,33,35,37,41,43,49,53,57\n3,5,6,11,14,16,21,22,23,30,33,41,42,47,49,51,54,55,57,58\n1,3,9,15,17,25,31,33,41,43,55\n2,5,6,8,9,15,16,17,20,22,26,27,29,32,34,37,38,45,49,50,51,52,54,55,57\n1,3,5,7,9,11,13,17,27,31,35,41,43,47,49,51,57,59\n4,11,14,15,16,22,23,26,29,30,32,34,37,40,43,44,47,49,51,54,56\n7,9,29,37,47,51,59\n2,3,4,6,9,10,12,15,20,21,25,30,35,36,38,40,42,45,46,49,50,52,55,56,57,58\n9,13,15,25,27,31,35,49\n1,2,4,5,6,9,10,13,14,15,22,25,26,27,28,30,33,34,39,40,42,43,44,49,55,58\n1,3,5,17,37,39,41,53\n1,2,4,6,7,10,12,13,14,15,16,20,24,27,29,30,34,38,43,45,46,49,52,53,56,59\n5,13,19,23,31,39,51,53,55,57\n3,4,5,7,9,12,14,17,18,20,22,23,25,32,33,34,43,48,49,50,51,52,54,55,56,57\n1,5,7,9,11,15,17,19,35,43,45,49\n5,6,9,15,18,22,23,24,25,27,33,35,36,41,42,46,48,52,55,56,57,59\n3,7,17,23,27,31,33,37,39,43,45,47,53\n1,2,4,5,7,9,12,13,16,17,18,19,20,21,23,26,27,28,29,32,35,37,38,39,40,46,47,48,50,52,55,57,58,59\n3,9,13,17,27,29,31,39,43,45,49,53,59\n2,3,4,11,14,15,20,22,23,25,27,28,30,36,41,43,44,50,53,57,58\n3,5,11,13,23,25,27,33,35,37,45,47,49,53,59\n1,2,3,4,10,11,12,14,15,17,18,19,20,21,23,24,26,27,29,34,36,44,45,49,51,53,54,56\n7,11,17,29,33,35,37,51,57\n2,3,5,6,7,12,16,21,22,28,29,30,32,34,37,38,39,41,45,46,47,48,50,52,57,59\n21,27,29,33,35,37,43,45,55,57,59\n1,4,12,15,18,20,22,26,27,29,31,36,42,47,54,55,59\n3,7,17,25,27,35,39,41,45,49,51,53,55\n1,4,6,9,11,18,20,22,28,29,32,33,41,42,45,51,52,54,55,56,57,59\n7,9,11,15,17,23,27,33,37,43,51,59\n3,5,9,12,15,18,21,24,25,26,33,38,39,40,42,45,50\n3,5,7,13,15,21,25,39,53,59\n3,5,12,13,19,21,22,31,37,39,45,47,49,50,52,55,56,59\n9,11,13,15,27,29,33,35,47,49,51,53,55,57,59\n1,3,7,8,9,11,14,22,27,28,30,31,35,39,42,43,46,48,52,54,56\n1,3,5,7,9,15,17,19,25,31,35,47,49,51,55,57\n4,5,7,9,10,17,24,26,27,28,30,32,33,34,36,41,44,46,47,48,50,51,53,58,59\n3,5,9,11,15,19,21,25,27,29,33,47,49,51,53,59\n1,3,6,8,11,14,16,17,18,20,22,24,27,30,31,32,34,35,41,42,45,47,48,50,52,53,58,59\n1,7,17,19,33,41,45,49,51,55,59\n1,2,3,4,6,8,9,11,12,13,17,24,25,27,28,34,39,42,43,45,51,55,57,58,59\n1,7,11,13,15,19,21,31,47,49,51,53,57\n2,5,7,13,14,15,17,19,21,28,37,38,40,41,42,45,46,47,51,54,57,58,59\n3,7,9,11,15,23,27,31,33,47,53,59\n1,8,9,11,13,20,21,22,24,26,27,32,38,43,52,54,56,57,58,59\n1,5,7,9,11,13,23,29,35,39,47,49\n1,2,3,5,7,8,9,11,21,27,28,29,33,35,37,39,40,49,50,53,54,56,59\n13,35,39,43,51,55\n4,7,9,10,18,19,20,21,23,24,25,30,31,36,37,40,43,45,46,47,48,50,53\n0\n+7,1\n10,1\n37,1\n38,1\n5,3\n17,3\n29,7\n44,7\n13,9\n13,10\n58,11\n37,12\n11,13\n45,15\n20,19\n56,19\n26,21\n1,22\n24,23\n52,23\n53,23\n3,25\n7,25\n12,25\n23,25\n1,26\n45,26\n7,28\n19,29\n47,29\n52,29\n53,30\n3,31\n3,32\n5,32\n20,33\n27,33\n54,33\n51,34\n2,35\n7,35\n22,35\n45,35\n21,36\n18,39\n41,39\n40,41\n5,43\n12,43\n5,47\n5,48\n37,53\n47,53\n7,54\n22,55\n53,57\n!23,1\n5,2\n23,2\n39,2\n53,2\n29,3\n31,4\n6,7\n53,7\n54,9\n55,10\n36,11\n31,14\n43,14\n49,15\n7,16\n31,16\n51,16\n47,18\n10,21\n46,23\n4,25\n9,25\n52,27\n17,28\n9,29\n21,29\n40,29\n13,32\n1,33\n11,34\n29,35\n43,36\n15,37\n36,37\n27,38\n29,39\n5,42\n45,43\n8,45\n22,45\n47,46\n27,47\n17,49\n59,50\n51,51\n15,52\n49,52\n53,52\n11,54\n27,54\n5,56\n47,56\n27,57\n31,59\n"
"61"

-}

ficaDim :: String -> String -- fica apenas c a dimensao do mapa em forma de string
ficaDim [] = []
ficaDim (x:xs) | x=='\n' = []
               | otherwise = x: ficaDim xs

{- |
A função 'decode', partindo das funções acima descritas, vai transformar a string gerada pela 'encode' no mapa correspondente, ou seja, pega na string
e gera uma lista de strings que representam o mapa inserido na função 'encode'.
Desta maneira, o resultado da 'decode' será igual ao input da 'encode'.

==Por exemplo:
>>> decode "9\n0\n0\n3,5\n3,6\n1,7\n2,5\n3,5\n3,4\n0\n+5,2\n3,3\n!5,5\n0 1 1\n"
["#########","#       #","# #?#?# #","#  ?  ? #","#?# # #?#","# ?  ?  #","# #?#?# #","#  ??   #","#########","+ 5 2","+ 3 3","! 5 5","0 1 1"]

>>> decode "61\n0\n6,7,10,13,15,18,20,23,26,27,28,29,33,35,36,37,38,42,45,57\n5,9,15,23,27,33,39,47,49,51,53\n1,3,5,6,9,12,13,15,17,18,20,22,26,29,34,36,38,44,47,51,52,53,56\n1,11,17,25,31,37,51,59\n5,6,11,14,18,19,20,21,24,26,28,32,33,37,39,40,42,46,50,54,55,56,57,59\n13,17,21,23,27,33,35,39,45,47,51,55,59\n3,5,6,8,10,11,13,15,25,26,27,28,29,32,34,35,38,40,41,42,44,46,47,50,51,53,54,55,56,59\n1,5,7,9,11,19,27,31,33,37,41,45,49,51,55,57,59\n4,6,13,14,15,18,19,23,28,31,33,35,39,42,45,48,51,54,58\n1,11,13,15,19,23,25,27,29,37,41,43,55,57,59\n1,16,17,21,23,24,26,27,34,35,36,41,45,55,57,58,59\n1,9,11,15,17,23,27,29,31,33,35,37,41,43,49,53,57\n3,5,6,11,14,16,21,22,23,30,33,41,42,47,49,51,54,55,57,58\n1,3,9,15,17,25,31,33,41,43,55\n2,5,6,8,9,15,16,17,20,22,26,27,29,32,34,37,38,45,49,50,51,52,54,55,57\n1,3,5,7,9,11,13,17,27,31,35,41,43,47,49,51,57,59\n4,11,14,15,16,22,23,26,29,30,32,34,37,40,43,44,47,49,51,54,56\n7,9,29,37,47,51,59\n2,3,4,6,9,10,12,15,20,21,25,30,35,36,38,40,42,45,46,49,50,52,55,56,57,58\n9,13,15,25,27,31,35,49\n1,2,4,5,6,9,10,13,14,15,22,25,26,27,28,30,33,34,39,40,42,43,44,49,55,58\n1,3,5,17,37,39,41,53\n1,2,4,6,7,10,12,13,14,15,16,20,24,27,29,30,34,38,43,45,46,49,52,53,56,59\n5,13,19,23,31,39,51,53,55,57\n3,4,5,7,9,12,14,17,18,20,22,23,25,32,33,34,43,48,49,50,51,52,54,55,56,57\n1,5,7,9,11,15,17,19,35,43,45,49\n5,6,9,15,18,22,23,24,25,27,33,35,36,41,42,46,48,52,55,56,57,59\n3,7,17,23,27,31,33,37,39,43,45,47,53\n1,2,4,5,7,9,12,13,16,17,18,19,20,21,23,26,27,28,29,32,35,37,38,39,40,46,47,48,50,52,55,57,58,59\n3,9,13,17,27,29,31,39,43,45,49,53,59\n2,3,4,11,14,15,20,22,23,25,27,28,30,36,41,43,44,50,53,57,58\n3,5,11,13,23,25,27,33,35,37,45,47,49,53,59\n1,2,3,4,10,11,12,14,15,17,18,19,20,21,23,24,26,27,29,34,36,44,45,49,51,53,54,56\n7,11,17,29,33,35,37,51,57\n2,3,5,6,7,12,16,21,22,28,29,30,32,34,37,38,39,41,45,46,47,48,50,52,57,59\n21,27,29,33,35,37,43,45,55,57,59\n1,4,12,15,18,20,22,26,27,29,31,36,42,47,54,55,59\n3,7,17,25,27,35,39,41,45,49,51,53,55\n1,4,6,9,11,18,20,22,28,29,32,33,41,42,45,51,52,54,55,56,57,59\n7,9,11,15,17,23,27,33,37,43,51,59\n3,5,9,12,15,18,21,24,25,26,33,38,39,40,42,45,50\n3,5,7,13,15,21,25,39,53,59\n3,5,12,13,19,21,22,31,37,39,45,47,49,50,52,55,56,59\n9,11,13,15,27,29,33,35,47,49,51,53,55,57,59\n1,3,7,8,9,11,14,22,27,28,30,31,35,39,42,43,46,48,52,54,56\n1,3,5,7,9,15,17,19,25,31,35,47,49,51,55,57\n4,5,7,9,10,17,24,26,27,28,30,32,33,34,36,41,44,46,47,48,50,51,53,58,59\n3,5,9,11,15,19,21,25,27,29,33,47,49,51,53,59\n1,3,6,8,11,14,16,17,18,20,22,24,27,30,31,32,34,35,41,42,45,47,48,50,52,53,58,59\n1,7,17,19,33,41,45,49,51,55,59\n1,2,3,4,6,8,9,11,12,13,17,24,25,27,28,34,39,42,43,45,51,55,57,58,59\n1,7,11,13,15,19,21,31,47,49,51,53,57\n2,5,7,13,14,15,17,19,21,28,37,38,40,41,42,45,46,47,51,54,57,58,59\n3,7,9,11,15,23,27,31,33,47,53,59\n1,8,9,11,13,20,21,22,24,26,27,32,38,43,52,54,56,57,58,59\n1,5,7,9,11,13,23,29,35,39,47,49\n1,2,3,5,7,8,9,11,21,27,28,29,33,35,37,39,40,49,50,53,54,56,59\n13,35,39,43,51,55\n4,7,9,10,18,19,20,21,23,24,25,30,31,36,37,40,43,45,46,47,48,50,53\n0\n+7,1\n10,1\n37,1\n38,1\n5,3\n17,3\n29,7\n44,7\n13,9\n13,10\n58,11\n37,12\n11,13\n45,15\n20,19\n56,19\n26,21\n1,22\n24,23\n52,23\n53,23\n3,25\n7,25\n12,25\n23,25\n1,26\n45,26\n7,28\n19,29\n47,29\n52,29\n53,30\n3,31\n3,32\n5,32\n20,33\n27,33\n54,33\n51,34\n2,35\n7,35\n22,35\n45,35\n21,36\n18,39\n41,39\n40,41\n5,43\n12,43\n5,47\n5,48\n37,53\n47,53\n7,54\n22,55\n53,57\n!23,1\n5,2\n23,2\n39,2\n53,2\n29,3\n31,4\n6,7\n53,7\n54,9\n55,10\n36,11\n31,14\n43,14\n49,15\n7,16\n31,16\n51,16\n47,18\n10,21\n46,23\n4,25\n9,25\n52,27\n17,28\n9,29\n21,29\n40,29\n13,32\n1,33\n11,34\n29,35\n43,36\n15,37\n36,37\n27,38\n29,39\n5,42\n45,43\n8,45\n22,45\n47,46\n27,47\n17,49\n59,50\n51,51\n15,52\n49,52\n53,52\n11,54\n27,54\n5,56\n47,56\n27,57\n31,59\n"


-}

decode :: String -> [String]
decode l = substituiPontos (drop (length (ficaDim l)+1) l) (mapaSemN 0 (read (ficaDim l))) 
                        ++ lines ( tVpE (porSimbolo (ficarBombs (ficarInf (tirarJog l))) '+') 
                        ++ tVpE (porSimbolo (ficarFlames (resto (ficarInf (tirarJog l)))) '!')
                        ++ tVpE (porSimbolo (ficarBombas (resto (ficarInf (tirarJog l)))) '*')
                        ++ ficarJog l )
           
{- |
O programa 'main' foi-nos facultado para a realização deste projeto e pode ser usado para testar as funções 'encode' e 'decode', por nós definidas, 
no ghc.

-}           

main :: IO ()
main = do a <- getArgs
          let p = a !! 0
          w <- getContents
          if length a == 1 && length p == 2 && (p=="-e" || p=="-d")
             then if p=="-e" then putStr $ encode $ lines w
                             else putStr $ unlines $ decode w
             else putStrLn "Parâmetros inválidos"